"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var graphql_1 = require("graphql");
var common_1 = require("./common");
function getGraphQLSortTypeObject(type) {
    var excludedFields = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        excludedFields[_i - 1] = arguments[_i];
    }
    if (type instanceof graphql_1.GraphQLScalarType ||
        type instanceof graphql_1.GraphQLEnumType) {
        return exports.GraphQLSortType;
    }
    if (type instanceof graphql_1.GraphQLNonNull) {
        return getGraphQLSortTypeObject(type.ofType);
    }
    if (type instanceof graphql_1.GraphQLObjectType) {
        return getGraphQLSortType.apply(void 0, [type].concat(excludedFields));
    }
    return undefined;
}
function getGraphQLSortType(type) {
    var excludedFields = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        excludedFields[_i - 1] = arguments[_i];
    }
    var sortTypeName = common_1.setSuffix(type.name, 'Type', 'SortType');
    return common_1.cache(common_1.typesCache, sortTypeName, function () { return new graphql_1.GraphQLInputObjectType({
        name: sortTypeName,
        fields: getGraphQLSortTypeFields.apply(void 0, [type].concat(excludedFields))
    }); });
}
exports.getGraphQLSortType = getGraphQLSortType;
function getGraphQLSortTypeFields(type) {
    var excludedFields = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        excludedFields[_i - 1] = arguments[_i];
    }
    return function () {
        var _a;
        var fields = common_1.getUnresolvedFieldsTypes.apply(void 0, [type, getGraphQLSortTypeObject].concat(excludedFields))();
        if (Object.keys(fields).length > 0) {
            return fields;
        }
        return _a = {}, _a[common_1.FICTIVE_SORT] = { type: exports.GraphQLSortType, isDeprecated: true, description: "IGNORE. Due to limitations of the package, objects with no sortable fields are not ommited. GraphQL input object types must have at least one field" }, _a;
    };
}
exports.GraphQLSortType = new graphql_1.GraphQLEnumType({
    name: 'SortType',
    values: {
        ASC: { value: 1 },
        DESC: { value: -1 }
    }
});
